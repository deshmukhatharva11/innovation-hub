import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  FiSettings,
  FiEye,
  FiEyeOff,
  FiSave,
  FiMoon,
  FiSun,
  FiMonitor,
  FiDownload
} from 'react-icons/fi';
import { toast } from 'react-hot-toast';
import { setTheme } from '../../store/slices/themeSlice';
import { authAPI } from '../../services/api';

const Settings = () => {
  const dispatch = useDispatch();
  const { user } = useSelector((state) => state.auth);
  const { mode } = useSelector((state) => state.theme);
  
  const [settings, setSettings] = useState({
    // Display Settings
    language: 'en',
    timezone: 'Asia/Kolkata',
    dateFormat: 'DD/MM/YYYY',
    
    // Theme Settings
    themeMode: mode || 'light'
  });

  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false
  });

  const [loading, setLoading] = useState(false);


  const handleSettingChange = (key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleThemeChange = (newTheme) => {
    handleSettingChange('themeMode', newTheme);
    dispatch(setTheme(newTheme));
  };

  const handleSaveSettings = async () => {
    if (!user?.id) return;
    
    setLoading(true);
    try {
      // Save settings to localStorage (theme, language, etc.)
      const otherSettings = {
        themeMode: settings.themeMode,
        language: settings.language,
        timezone: settings.timezone,
        dateFormat: settings.dateFormat
      };
      
      localStorage.setItem(`settings_${user.id}`, JSON.stringify(otherSettings));
      
      toast.success('Settings saved successfully!');
    } catch (error) {
      console.error('Error saving settings:', error);
      toast.error('Failed to save settings');
    } finally {
      setLoading(false);
    }
  };

  const handlePasswordChange = async () => {
    if (!user?.id) return;
    
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      toast.error('New passwords do not match');
      return;
    }

    if (passwordData.newPassword.length < 8) {
      toast.error('Password must be at least 8 characters long');
      return;
    }

    setLoading(true);
    try {
      await authAPI.changePassword(passwordData.currentPassword, passwordData.newPassword);
      
      toast.success('Password changed successfully!');
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    } catch (error) {
      console.error('Error changing password:', error);
      if (error.response?.data?.message) {
        toast.error(error.response.data.message);
      } else {
        toast.error('Failed to change password');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleExportData = async () => {
    if (!user?.id) return;
    
    try {
      setLoading(true);
      
      // Fetch comprehensive user data
      const response = await fetch(`/api/users/${user.id}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch user data');
      }
      
      const userData = await response.json();
      
      // Create CSV content
      const csvContent = createCSVContent(userData.data || userData, settings);
      
      // Create and download CSV file
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      
      link.setAttribute('href', url);
      link.setAttribute('download', `${user.name.replace(/\s+/g, '_')}_data_export_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      URL.revokeObjectURL(url);
      toast.success('Data exported as CSV successfully!');
    } catch (error) {
      console.error('Error exporting data:', error);
      toast.error('Failed to export data');
    } finally {
      setLoading(false);
    }
  };

  const createCSVContent = (userData, settings) => {
    const exportDate = new Date().toISOString();
    
    // Create CSV headers and data
    const csvRows = [];
    
    // Add metadata
    csvRows.push(['SGBAU Innovation Hub - Data Export']);
    csvRows.push(['Export Date', exportDate]);
    csvRows.push(['User ID', userData.id]);
    csvRows.push(['Generated By', 'SGBAU Pre-Incubation Centre']);
    csvRows.push([]); // Empty row
    
    // Personal Information
    csvRows.push(['PERSONAL INFORMATION']);
    csvRows.push(['Field', 'Value']);
    csvRows.push(['Name', userData.name || 'N/A']);
    csvRows.push(['Email', userData.email || 'N/A']);
    csvRows.push(['Phone', userData.phone || 'N/A']);
    csvRows.push(['Role', userData.role || 'N/A']);
    csvRows.push(['Department', userData.department || 'N/A']);
    csvRows.push(['Bio', userData.bio || 'N/A']);
    csvRows.push(['Date of Birth', userData.date_of_birth || 'N/A']);
    csvRows.push(['LinkedIn URL', userData.linkedin_url || 'N/A']);
    csvRows.push(['GitHub URL', userData.github_url || 'N/A']);
    csvRows.push(['Portfolio URL', userData.portfolio_url || 'N/A']);
    csvRows.push([]); // Empty row
    
    // Academic Information
    csvRows.push(['ACADEMIC INFORMATION']);
    csvRows.push(['Field', 'Value']);
    csvRows.push(['Year of Study', userData.year_of_study || 'N/A']);
    csvRows.push(['Roll Number', userData.roll_number || 'N/A']);
    csvRows.push(['GPA', userData.gpa || 'N/A']);
    csvRows.push(['College', userData.college?.name || 'N/A']);
    csvRows.push(['College ID', userData.college_id || 'N/A']);
    csvRows.push([]); // Empty row
    
    // Professional Information
    csvRows.push(['PROFESSIONAL INFORMATION']);
    csvRows.push(['Field', 'Value']);
    csvRows.push(['Position', userData.position || 'N/A']);
    csvRows.push(['Experience Years', userData.experience_years || 'N/A']);
    csvRows.push(['Designation', userData.designation || 'N/A']);
    csvRows.push(['Expertise Areas', userData.expertise_areas || 'N/A']);
    csvRows.push(['Skills', userData.skills || 'N/A']);
    csvRows.push([]); // Empty row
    
    // Account Information
    csvRows.push(['ACCOUNT INFORMATION']);
    csvRows.push(['Field', 'Value']);
    csvRows.push(['User ID', userData.id]);
    csvRows.push(['Is Active', userData.is_active ? 'Yes' : 'No']);
    csvRows.push(['Email Verified', userData.email_verified ? 'Yes' : 'No']);
    csvRows.push(['Last Login', userData.last_login || 'N/A']);
    csvRows.push(['Created At', userData.created_at || 'N/A']);
    csvRows.push(['Updated At', userData.updated_at || 'N/A']);
    csvRows.push([]); // Empty row
    
    // Settings Information
    csvRows.push(['SETTINGS']);
    csvRows.push(['Field', 'Value']);
    csvRows.push(['Theme Mode', settings.themeMode || 'N/A']);
    csvRows.push(['Language', settings.language || 'N/A']);
    csvRows.push(['Timezone', settings.timezone || 'N/A']);
    csvRows.push(['Date Format', settings.dateFormat || 'N/A']);
    csvRows.push([]); // Empty row
    
    // Social Links
    if (userData.social_links) {
      csvRows.push(['SOCIAL LINKS']);
      csvRows.push(['Platform', 'URL']);
      try {
        const socialLinks = typeof userData.social_links === 'string' 
          ? JSON.parse(userData.social_links) 
          : userData.social_links;
        
        Object.entries(socialLinks).forEach(([platform, url]) => {
          csvRows.push([platform, url || 'N/A']);
        });
      } catch (error) {
        csvRows.push(['Error parsing social links', 'Invalid JSON format']);
      }
      csvRows.push([]); // Empty row
    }
    
    // Convert to CSV string
    return csvRows.map(row => 
      row.map(field => {
        // Escape fields that contain commas, quotes, or newlines
        if (typeof field === 'string' && (field.includes(',') || field.includes('"') || field.includes('\n'))) {
          return `"${field.replace(/"/g, '""')}"`;
        }
        return field;
      }).join(',')
    ).join('\n');
  };


  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-secondary-900 dark:text-white">
          Settings
        </h1>
        <button
          onClick={handleSaveSettings}
          className="btn-primary"
          disabled={loading}
        >
          {loading ? (
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
          ) : (
            <FiSave className="mr-2" size={16} />
          )}
          Save Settings
        </button>
        </div>

        {/* Theme Settings */}
        <div className="card">
          <div className="p-6 border-b border-secondary-200 dark:border-secondary-700">
            <h2 className="text-lg font-semibold text-secondary-900 dark:text-white flex items-center">
              <FiSettings className="mr-2" />
              Appearance
            </h2>
          </div>
          <div className="p-6 space-y-4">
            <div>
              <label className="block font-medium text-secondary-900 dark:text-white mb-3">Theme</label>
              <div className="grid grid-cols-3 gap-3">
                <button
                  onClick={() => handleThemeChange('light')}
                  className={`p-3 rounded-lg border-2 transition-colors duration-200 ${
                    settings.themeMode === 'light'
                      ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                      : 'border-secondary-300 dark:border-secondary-600 hover:border-primary-300'
                  }`}
                >
                  <FiSun className="mx-auto mb-2" size={20} />
                  <span className="text-sm font-medium">Light</span>
                </button>
                <button
                  onClick={() => handleThemeChange('dark')}
                  className={`p-3 rounded-lg border-2 transition-colors duration-200 ${
                    settings.themeMode === 'dark'
                      ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                      : 'border-secondary-300 dark:border-secondary-600 hover:border-primary-300'
                  }`}
                >
                  <FiMoon className="mx-auto mb-2" size={20} />
                  <span className="text-sm font-medium">Dark</span>
                </button>
                <button
                  onClick={() => handleThemeChange('system')}
                  className={`p-3 rounded-lg border-2 transition-colors duration-200 ${
                    settings.themeMode === 'system'
                      ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                      : 'border-secondary-300 dark:border-secondary-600 hover:border-primary-300'
                  }`}
                >
                  <FiMonitor className="mx-auto mb-2" size={20} />
                  <span className="text-sm font-medium">System</span>
                </button>
              </div>
            </div>

            <div>
              <label className="block font-medium text-secondary-900 dark:text-white mb-2">Language</label>
              <select
                value={settings.language}
                onChange={(e) => handleSettingChange('language', e.target.value)}
                className="input-field"
              >
                <option value="en">English</option>
                <option value="hi">हिंदी (Hindi)</option>
                <option value="mr">मराठी (Marathi)</option>
              </select>
            </div>

            <div>
              <label className="block font-medium text-secondary-900 dark:text-white mb-2">Timezone</label>
              <select
                value={settings.timezone}
                onChange={(e) => handleSettingChange('timezone', e.target.value)}
                className="input-field"
              >
                <option value="Asia/Kolkata">Asia/Kolkata (IST)</option>
                <option value="UTC">UTC</option>
                <option value="America/New_York">America/New_York (EST)</option>
              </select>
          </div>
        </div>
      </div>

      {/* Password Change */}
      <div className="card">
        <div className="p-6 border-b border-secondary-200 dark:border-secondary-700">
          <h2 className="text-lg font-semibold text-secondary-900 dark:text-white">
            Change Password
          </h2>
        </div>
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label className="block text-sm font-medium text-secondary-700 dark:text-secondary-300 mb-2">
                Current Password
              </label>
              <div className="relative">
                <input
                  type={showPasswords.current ? 'text' : 'password'}
                  value={passwordData.currentPassword}
                  onChange={(e) => setPasswordData(prev => ({ ...prev, currentPassword: e.target.value }))}
                  className="input-field pr-10"
                />
                <button
                  type="button"
                  onClick={() => setShowPasswords(prev => ({ ...prev, current: !prev.current }))}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                >
                  {showPasswords.current ? <FiEyeOff size={16} /> : <FiEye size={16} />}
                </button>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-secondary-700 dark:text-secondary-300 mb-2">
                New Password
              </label>
              <div className="relative">
                <input
                  type={showPasswords.new ? 'text' : 'password'}
                  value={passwordData.newPassword}
                  onChange={(e) => setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))}
                  className="input-field pr-10"
                />
                <button
                  type="button"
                  onClick={() => setShowPasswords(prev => ({ ...prev, new: !prev.new }))}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                >
                  {showPasswords.new ? <FiEyeOff size={16} /> : <FiEye size={16} />}
                </button>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-secondary-700 dark:text-secondary-300 mb-2">
                Confirm Password
              </label>
              <div className="relative">
                <input
                  type={showPasswords.confirm ? 'text' : 'password'}
                  value={passwordData.confirmPassword}
                  onChange={(e) => setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                  className="input-field pr-10"
                />
                <button
                  type="button"
                  onClick={() => setShowPasswords(prev => ({ ...prev, confirm: !prev.confirm }))}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                >
                  {showPasswords.confirm ? <FiEyeOff size={16} /> : <FiEye size={16} />}
                </button>
              </div>
            </div>
          </div>
          <div className="mt-6">
            <button
              onClick={handlePasswordChange}
              className="btn-primary"
              disabled={loading || !passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword}
            >
              {loading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              ) : (
                <FiSave className="mr-2" size={16} />
              )}
              Change Password
            </button>
          </div>
        </div>
      </div>

      {/* Data Management */}
      <div className="card">
        <div className="p-6 border-b border-secondary-200 dark:border-secondary-700">
          <h2 className="text-lg font-semibold text-secondary-900 dark:text-white">
            Data Management
          </h2>
        </div>
        <div className="p-6">
          <div className="max-w-md">
            <h3 className="font-medium text-secondary-900 dark:text-white mb-2">Export Your Data</h3>
              <p className="text-sm text-secondary-600 dark:text-secondary-400 mb-4">
              Download a comprehensive copy of your data including profile information, academic details, settings, and account activity in CSV format.
            </p>
            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-4">
              <div className="flex">
                <FiDownload className="h-5 w-5 text-blue-400 mr-3 mt-0.5" />
                <div className="text-sm">
                  <p className="text-blue-800 dark:text-blue-200 font-medium">
                    What's included in the export:
                  </p>
                  <ul className="text-blue-700 dark:text-blue-300 mt-1 space-y-1">
                    <li>• Personal and academic information</li>
                    <li>• Professional details and skills</li>
                    <li>• Account settings and preferences</li>
                    <li>• Social media links and portfolio URLs</li>
                    <li>• Account status and verification details</li>
                  </ul>
                </div>
              </div>
            </div>
              <button
                onClick={handleExportData}
              className="btn-primary"
                disabled={loading}
              >
              {loading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              ) : (
                <FiDownload className="mr-2" size={16} />
              )}
              {loading ? 'Exporting...' : 'Export Data as CSV'}
              </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Settings;
